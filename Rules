#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

preprocess do
  # create tag pages
  tag_set(items).each do |tag|
    items << Nanoc::Item.new(
      "",
      { :tag => tag },
      "/tags/#{tag}/"
    )
  end

  # set "article" helper attributes
  items.each do |item|
    if item.identifier.start_with? '/posts'
      item[:kind] = 'article'
      item[:created_at] = item[:Date] || File.ctime(item[:content_filename]).to_s
    end
  end
end

compile '/tags/*/' do
  layout 'tags'
end

compile '/assets/' do
  # don’t filter or layout
end

compile '/posts/*/' do
  filter :pandoc
  layout 'default'
end

compile '/pages/*/' do
  filter :erb
  layout 'default'
end

compile '*' do
  # don’t filter binary items
  unless item.binary?
    case item[:extension] && item[:extension].split('.').last
    when 'md', 'markdown', 'pandoc'
      filter :pandoc
    else
      filter :erb
    end

    layout 'default'
  end
end

route '/assets/*' do
  # Write item with identifier /foo/ to /foo/index.html
  item.identifier.chop + '.' + item[:extension]
end

route '/posts/*' do
  # drop 'posts' lead
  tail = item.identifier['/posts'.size .. -1]
  tail.sub! /^\/(\d\d\d\d)\/(\d\d?)\/(\d\d?)-(.*)/ do
    "/#{$1}/#{$2}/#{$3}/#{$4}"
  end

  tail + 'index.html'
end

route '/pages/*' do
  # drop 'pages' lead
  # This will not conflict with 'posts', because they are organized by date first
  item.identifier['/pages'.size .. -1] + 'index.html'
end

route '*' do
  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension]
  else
    # Write item with identifier /foo/ to /foo/index.html
    item.identifier + 'index.html'
  end
end

layout '*', :erb
